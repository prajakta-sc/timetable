/*
 * TimeTableSaleForm.java
 *
 * Created on October 10, 2007, 1:50 PM
 */

package com.krcl.cc;

import java.sql.*;
import javax.swing.JInternalFrame;

/**
 * Class related to Sale of Railway Timetables
 * @author Prajakta
 */
public class TimeTableSaleForm extends JInternalFrame {
    
    /** Creates new form TimeTableSaleForm */
    public TimeTableSaleForm () {
        initComponents ();
         try {
            Class.forName ("sun.jdbc.odbc.JdbcOdbcDriver");
            con = DriverManager.getConnection ("jdbc:odbc:timetable");
         } catch (SQLException se) {
             se.printStackTrace();
         } catch(ClassNotFoundException cnfe) {
             cnfe.printStackTrace();
         }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblSaleNo = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtSaleNo = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        lblSoldBy = new javax.swing.JLabel();
        lblCharge = new javax.swing.JLabel();
        lblTotalCharge = new javax.swing.JLabel();
        txtSoldBy = new javax.swing.JTextField();
        txtCharge = new javax.swing.JTextField();
        txtTotalCharge = new javax.swing.JTextField();
        btnSale = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        lblStartNo = new javax.swing.JLabel();
        txtStartNo = new javax.swing.JTextField();
        lblSaleMessage = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Time Table Sale");
        setFrameIcon(null);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblSaleNo.setText("Sale No");
        getContentPane().add(lblSaleNo);
        lblSaleNo.setBounds(10, 40, 90, 20);

        lblQuantity.setText("Quantity");
        getContentPane().add(lblQuantity);
        lblQuantity.setBounds(10, 80, 90, 20);

        txtSaleNo.setColumns(15);
        txtSaleNo.setEditable(false);
        getContentPane().add(txtSaleNo);
        txtSaleNo.setBounds(110, 40, 120, 20);

        txtQuantity.setColumns(15);
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantityFocusLost(evt);
            }
        });

        getContentPane().add(txtQuantity);
        txtQuantity.setBounds(110, 80, 120, 20);

        lblSoldBy.setText("Sold By");
        getContentPane().add(lblSoldBy);
        lblSoldBy.setBounds(260, 40, 80, 20);

        lblCharge.setText("Charge");
        getContentPane().add(lblCharge);
        lblCharge.setBounds(10, 120, 80, 20);

        lblTotalCharge.setText(" Total Charge");
        getContentPane().add(lblTotalCharge);
        lblTotalCharge.setBounds(260, 120, 80, 20);

        txtSoldBy.setColumns(15);
        txtSoldBy.setEditable(false);
        getContentPane().add(txtSoldBy);
        txtSoldBy.setBounds(360, 40, 80, 20);

        txtCharge.setColumns(15);
        txtCharge.setEditable(false);
        getContentPane().add(txtCharge);
        txtCharge.setBounds(110, 120, 120, 20);

        txtTotalCharge.setColumns(15);
        txtTotalCharge.setEditable(false);
        getContentPane().add(txtTotalCharge);
        txtTotalCharge.setBounds(360, 120, 80, 20);

        btnSale.setText("Sale");
        btnSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaleActionPerformed(evt);
            }
        });

        getContentPane().add(btnSale);
        btnSale.setBounds(210, 260, 90, 23);

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        getContentPane().add(btnPrevious);
        btnPrevious.setBounds(110, 230, 90, 23);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        getContentPane().add(btnClear);
        btnClear.setBounds(210, 230, 90, 23);

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        getContentPane().add(btnNext);
        btnNext.setBounds(310, 230, 90, 23);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        getContentPane().add(btnExit);
        btnExit.setBounds(310, 260, 90, 23);

        getContentPane().add(txtName);
        txtName.setBounds(80, 160, 360, 20);

        lblName.setText("Name");
        getContentPane().add(lblName);
        lblName.setBounds(10, 160, 60, 20);

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        getContentPane().add(btnNew);
        btnNew.setBounds(111, 260, 90, 23);

        lblStartNo.setText("Start No");
        getContentPane().add(lblStartNo);
        lblStartNo.setBounds(260, 80, 80, 20);

        txtStartNo.setEditable(false);
        getContentPane().add(txtStartNo);
        txtStartNo.setBounds(360, 80, 80, 20);

        getContentPane().add(lblSaleMessage);
        lblSaleMessage.setBounds(0, 315, 510, 20);

        pack();
    }//GEN-END:initComponents

    private void btnExitActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClearActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtSaleNo.setText ("");
        txtSoldBy.setText ("");
        txtCharge.setText ("");
        txtQuantity.setText ("");
        txtTotalCharge.setText ("");
        txtName.setText ("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnNextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        boolean nextRow = false;
        try {
            nextRow = rs.next ();
            if(nextRow) {
                txtSaleNo.setText (String.valueOf (rs.getInt (1)));
                txtSoldBy.setText (rs.getString (2));
                txtCharge.setText (String.valueOf (rs.getDouble (3)));
                txtQuantity.setText (String.valueOf (rs.getInt(4)));
                txtTotalCharge.setText (String.valueOf (rs.getDouble (5)));
                txtName.setText (rs.getString (6));
            }
        } catch(Exception e) {
            Message msg = new Message(new javax.swing.JFrame (),true);
            msg.setMessage ("There are no more rows in forward direction");
            msg.isCancelRequired (false);
            msg.show();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        boolean previousRow = false;
        try {
            previousRow = rs.previous ();
            if(previousRow) {
                txtSaleNo.setText (String.valueOf (rs.getInt (1)));
                txtSoldBy.setText (rs.getString (2));
                txtCharge.setText (String.valueOf (rs.getDouble (3)));
                txtQuantity.setText (String.valueOf (rs.getInt(4)));
                txtTotalCharge.setText (String.valueOf (rs.getDouble (5)));
                txtName.setText (rs.getString (6));
            }
        } catch(Exception e) {
            Message msg = new Message(new javax.swing.JFrame (),true);
            msg.setMessage ("There are no more rows in reverse direction");
            msg.isCancelRequired (false);
            msg.show();
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void formInternalFrameClosing (javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        try {
            rs.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnNewActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        txtSaleNo.setText ("");
        txtSoldBy.setText ("");
        txtCharge.setText ("");
        txtQuantity.setText ("");
        txtTotalCharge.setText ("");
        txtName.setText ("");
        txtQuantity.requestFocusInWindow ();
        getNextSaleNo();
        getCurrentNo();
        txtSoldBy.setText (Login.userName);
        try {
            st = con.createStatement ();
            rs = st.executeQuery ("select charge from ccmk_timetable ");
            rs.next ();
            charge = rs.getDouble (1);
            txtCharge.setText (String.valueOf (charge));
        } catch(Exception e) {
            e.printStackTrace ();
        }finally {
            try {
                rs.close();
                st.close();
            } catch(SQLException se) {
                se.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSaleActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaleActionPerformed
        try {
            if(TimeTable.getMode().equals ("Add") ) {
                quantity = Integer.parseInt (txtQuantity.getText ());
                end_no = start_no + quantity -1;
                java.util.Date today_dt = new java.util.Date();
                java.sql.Timestamp time_stamp = new java.sql.Timestamp(today_dt.getTime ());
                
                pst = con.prepareStatement ("INSERT INTO cctk_timetable_sale values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ",
                        ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                pst.setString(1,"RN");
                pst.setInt(2, Integer.parseInt (txtSaleNo.getText()));
                pst.setInt(3, Integer.parseInt (txtQuantity.getText ()));
                
                pst.setInt(4, start_no);
                pst.setInt (5, end_no);
                pst.setDouble(6, Double.parseDouble(txtCharge.getText ()));
                pst.setDouble(7, Double.parseDouble (txtTotalCharge.getText ())); 
                pst.setString (8, txtName.getText ());
                pst.setString (9, Login.userName);
                
                pst.setTimestamp (10, time_stamp);
                
                int no_rows = pst.executeUpdate ();
                
                lblSaleMessage.setText("" + quantity + " timetables sold successfully.");
                int next_no = end_no + 1;
                pst = null;
                String upsql = "UPDATE cctk_login SET current_no = ? WHERE user_id = ? AND stn_no = ? AND status = 'O'";
                pst = con.prepareStatement(upsql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                pst.setInt (1, next_no);
                pst.setString (2,  Login.userName);
                pst.setString (3, "RN");
                no_rows = pst.executeUpdate ();
                
                pst = null;
                upsql = "UPDATE cctk_timetable_issue SET current_no = ? WHERE user_id = ? AND stn_no = ? AND status = 'O'";
                pst = con.prepareStatement(upsql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                pst.setInt (1, next_no);
                pst.setString (2,  Login.userName);
                pst.setString (3, "RN");
                no_rows = pst.executeUpdate ();
            } else {
                sql = null;
                sql = "SELECT  cctk_timetable_sale.sale_no, " +
                            "cctk_timetable_sale.user_id, " + 
                            "cctk_timetable_sale.charge, cctk_timetable_sale.quantity, " + 
                            "cctk_timetable_sale.total_charge, cctk_timetable_sale.passenger_name " +
                        "FROM cctk_timetable_sale  " +
                        "WHERE stn_no = 'RN' ";
                
                if(txtSaleNo.getText () != null && txtSaleNo.getText().length () > 0 ) {
                    sql = sql.concat ("AND cctk_timetable_sale.sale_no = ? " );
                }                
                if(txtSoldBy.getText () != null && txtSoldBy.getText().length () > 0) {
                    sql = sql.concat ("AND cctk_timetable_sale.user_id = ? " );
                }
                if(txtQuantity.getText () != null && txtQuantity.getText().length () > 0 ){
                    sql = sql.concat ("AND cctk_timetable_sale.quantity = ? " );
                }

                pst = con.prepareStatement (sql,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int index = 1;
                if(txtSaleNo.getText () != null && txtSaleNo.getText().length () > 0 ) {
                    pst.setInt (index, Integer.parseInt (txtSaleNo.getText ()));
                    index++;
                }
                if(txtSoldBy.getText () != null && txtSoldBy.getText().length () > 0 ) {
                    pst.setString (index, txtSoldBy.getText ()); 
                    index++;
                }
                if(txtQuantity.getText () != null && txtQuantity.getText().length () > 0 ) {
                    pst.setInt (index, Integer.parseInt (txtQuantity.getText ()));
                    index++;
                }
                rs = pst.executeQuery();
                rs.next ();
                
                txtSaleNo.setText (String.valueOf (rs.getInt (1)));
                txtSoldBy.setText (rs.getString (2));
                txtCharge.setText (String.valueOf (rs.getDouble (3)));
                txtQuantity.setText (String.valueOf (rs.getInt(4)));
                txtTotalCharge.setText (String.valueOf (rs.getDouble (5)));
                txtName.setText (rs.getString (6));
            }
        } catch(Exception e) {
            e.printStackTrace();
        } 
    }//GEN-LAST:event_btnSaleActionPerformed

    private void txtQuantityFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusLost
        if(txtQuantity.getText () != null && txtQuantity.getText().length () > 0  && TimeTable.getMode().equals ("Add") ){
            quantity = Integer.parseInt (txtQuantity.getText ());
            totalCharge = quantity * charge;
            txtTotalCharge.setText (String.valueOf (totalCharge));
        }
    }//GEN-LAST:event_txtQuantityFocusLost
    
    private void formInternalFrameOpened (javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        txtSoldBy.setText (Login.userName);
        checkMode (TimeTable.getMode ());
        connect();
        txtQuantity.requestFocusInWindow ();
    }//GEN-LAST:event_formInternalFrameOpened
    
    /**
     * Connects to datasource
     * Obtains charge for default timetable type
     */    
    public void connect () {
        try {
            st = con.createStatement ();
            rs = st.executeQuery("select charge from ccmk_timetable ");
            rs.next();
            charge = rs.getDouble (1);
            txtCharge.setText (String.valueOf (charge));
            if(TimeTable.getMode().equals ("Add")) {
                getNextSaleNo();
            }
        } catch (Exception se) {
            se.printStackTrace ();
        }
    }
    
    /**
     * Obtains next sale no
     */    
    public void getNextSaleNo() {
        try {
            st = con.createStatement ();
            rs = st.executeQuery ("select max(sale_no) from cctk_timetable_sale");
            rs.next ();
            sale_no = rs.getInt (1);
            if(sale_no == 0)
                sale_no = 1;
            else 
                sale_no = sale_no + 1;
            txtSaleNo.setText (String.valueOf (sale_no));
        } catch (Exception se) {
            se.printStackTrace ();
        } finally {
            try {
                rs.close();
                st.close();
            } catch(SQLException se) {
                se.printStackTrace();
            }
        }
    }
    
    /**
     * Obtains timetable no to be sold now
     */    
    public void getCurrentNo () {
        try {
            pst = con.prepareStatement ("SELECT  current_no, last_no FROM cctk_login WHERE status = 'O' AND user_id = ? AND stn_no = ? ");
            pst.setString (1, Login.userName);
            pst.setString (2, "RN");
            if(pst.execute ())
                rs = pst.getResultSet ();
            System.out.println(start_no);
            rs.next ();
            start_no = rs.getInt(1);
            max_no = rs.getInt(2);
            if(start_no > max_no) {
                javax.swing.JOptionPane.showMessageDialog(null, 
                "This set of timetables issued to you is over. Logout and login with new set", 
                "Set Over", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else if(start_no == max_no ) {
                javax.swing.JOptionPane.showMessageDialog(null, 
                "This is the last timetable that can be sold by you from this set. Logout and login with new set", 
                "Last Timetable left", javax.swing.JOptionPane.WARNING_MESSAGE);
            } else {
                txtStartNo.setText(String.valueOf(start_no));
            }
        } catch(Exception e) {
            e.printStackTrace();
        }finally {
            try {
                rs.close();
                pst.close();
            } catch(SQLException se) {
                se.printStackTrace();
            }
        }
    }    
    
    /**
     * Mode in which program has been opened
     * options are "Add" & "Query"
     * @param mode Add / Query
     */    
    public void checkMode (java.lang.String mode) {
         if(TimeTable.getMode().equals ("Add")) {
            setAddMode ();
        } else {
            setQueryMode ();
        }
    }
    
    /**
     * Set interface for Query mode
     */    
    public void setQueryMode () {
        txtSaleNo.setEditable (true);
        txtSoldBy.setEditable (true);
        txtQuantity.setEditable (true);
        btnPrevious.setVisible (true);
        btnNext.setVisible (true);
        btnClear.setVisible (true);
        btnNew.setVisible (false);
        btnSale.setText ("Query");
    }
    
    /**
     * Set interface for Add mode
     */    
    public void setAddMode () {
        txtSaleNo.setEditable (false);
        txtSoldBy.setEditable (false);
        btnPrevious.setVisible (false);
        btnNext.setVisible (false);
        btnClear.setVisible (false);
        btnNew.setVisible (true);
        btnSale.setText ("Sale");
        getCurrentNo ();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSale;
    private javax.swing.JLabel lblCharge;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSaleMessage;
    private javax.swing.JLabel lblSaleNo;
    private javax.swing.JLabel lblSoldBy;
    private javax.swing.JLabel lblStartNo;
    private javax.swing.JLabel lblTotalCharge;
    private javax.swing.JTextField txtCharge;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSaleNo;
    private javax.swing.JTextField txtSoldBy;
    private javax.swing.JTextField txtStartNo;
    private javax.swing.JTextField txtTotalCharge;
    // End of variables declaration//GEN-END:variables
    private static java.sql.Connection con = null;
    private static java.sql.PreparedStatement pst = null;
    private static java.sql.Statement st = null;
    private static java.sql.ResultSet rs = null;
    private int sale_no = 0;
    private double totalCharge = 0.00;
    private int start_no = 0;
    private int end_no = 0;
    private int quantity = 0;
    private String sql;
    private double charge = 0.00;
    private int max_no = 0;
}
