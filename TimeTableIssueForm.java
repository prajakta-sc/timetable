/*
 * TimeTableIssueForm.java
 *
 * Created on October 10, 2007, 11:18 AM
 */

package com.krcl.cc;

/**
 *
 * @author  Prajakta
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import javax.swing.event.*;
import java.sql.*;
import com.krcl.cc.*;

public class TimeTableIssueForm extends javax.swing.JInternalFrame {
    
    /** Creates new form TimeTableIssueForm */
    public TimeTableIssueForm () {
        initComponents ();
        try {
            Class.forName ("sun.jdbc.odbc.JdbcOdbcDriver");
            con = DriverManager.getConnection ("jdbc:odbc:timetable");
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblIssuedTo = new javax.swing.JLabel();
        txtIssuedTo = new javax.swing.JTextField();
        lblIssueNo = new javax.swing.JLabel();
        txtIssueNo = new javax.swing.JTextField();
        lblIssueDate = new javax.swing.JLabel();
        txtIssueDate = new javax.swing.JTextField();
        lblFirstNo = new javax.swing.JLabel();
        txtFirstNo = new javax.swing.JTextField();
        lblLastNo = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtLastNo = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        btnIssue = new javax.swing.JButton();
        lblImprest = new javax.swing.JLabel();
        txtImprest = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();

        getContentPane().setLayout(null);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Issue Time Table");
        setPreferredSize(new java.awt.Dimension(500, 500));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblIssuedTo.setText("Issued To :");
        getContentPane().add(lblIssuedTo);
        lblIssuedTo.setBounds(20, 40, 70, 20);

        txtIssuedTo.setColumns(10);
        txtIssuedTo.setEditable(false);
        getContentPane().add(txtIssuedTo);
        txtIssuedTo.setBounds(100, 40, 90, 20);

        lblIssueNo.setText("Issue No           :");
        getContentPane().add(lblIssueNo);
        lblIssueNo.setBounds(210, 40, 120, 20);

        txtIssueNo.setColumns(10);
        txtIssueNo.setEditable(false);
        getContentPane().add(txtIssueNo);
        txtIssueNo.setBounds(350, 40, 80, 20);

        lblIssueDate.setText("Issue Date :");
        getContentPane().add(lblIssueDate);
        lblIssueDate.setBounds(20, 80, 70, 20);

        txtIssueDate.setEditable(false);
        txtIssueDate.setText(" ");
        getContentPane().add(txtIssueDate);
        txtIssueDate.setBounds(100, 80, 90, 20);

        lblFirstNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFirstNo.setText("Start TimeTable No");
        getContentPane().add(lblFirstNo);
        lblFirstNo.setBounds(20, 120, 125, 20);

        txtFirstNo.setColumns(15);
        txtFirstNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstNoFocusLost(evt);
            }
        });

        getContentPane().add(txtFirstNo);
        txtFirstNo.setBounds(20, 150, 125, 20);

        lblLastNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLastNo.setText(" End TimeTable No");
        getContentPane().add(lblLastNo);
        lblLastNo.setBounds(170, 120, 125, 20);

        lblQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuantity.setText("Quantity");
        getContentPane().add(lblQuantity);
        lblQuantity.setBounds(320, 120, 125, 20);

        txtLastNo.setColumns(15);
        txtLastNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastNoFocusLost(evt);
            }
        });

        getContentPane().add(txtLastNo);
        txtLastNo.setBounds(170, 150, 125, 20);

        txtQuantity.setColumns(15);
        txtQuantity.setEditable(false);
        getContentPane().add(txtQuantity);
        txtQuantity.setBounds(320, 150, 125, 20);

        btnIssue.setText("Issue");
        btnIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIssueActionPerformed(evt);
            }
        });

        getContentPane().add(btnIssue);
        btnIssue.setBounds(200, 230, 90, 23);

        lblImprest.setText("Imprest Cash      :");
        getContentPane().add(lblImprest);
        lblImprest.setBounds(210, 80, 120, 20);

        getContentPane().add(txtImprest);
        txtImprest.setBounds(350, 80, 80, 20);

        getContentPane().add(lblMessage);
        lblMessage.setBounds(5, 320, 500, 30);

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        getContentPane().add(btnPrevious);
        btnPrevious.setBounds(100, 200, 90, 23);

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        getContentPane().add(btnNext);
        btnNext.setBounds(300, 200, 90, 23);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        getContentPane().add(btnExit);
        btnExit.setBounds(300, 230, 90, 23);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        getContentPane().add(btnClear);
        btnClear.setBounds(200, 200, 90, 23);

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        getContentPane().add(btnNew);
        btnNew.setBounds(100, 230, 90, 23);

        pack();
    }//GEN-END:initComponents

    private void txtFirstNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNoFocusLost
        // TODO add your handling code here:
        String strFirst = txtFirstNo.getText();
        System.out.println(strFirst);
        if(strFirst != null && strFirst.length () > 0)
            first_no = Integer.parseInt(strFirst);
        else 
            first_no = 0;
        quantity = last_no - first_no + 1;
        txtQuantity.setText("" + quantity);
    }//GEN-LAST:event_txtFirstNoFocusLost

    private void txtLastNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastNoFocusLost
        // TODO add your handling code here:
        String strLast = txtLastNo.getText();
        System.out.println(strLast);
        if(strLast != null && strLast.length () > 0)
            last_no = Integer.parseInt(strLast);
        else 
            last_no = 0;
        quantity = last_no - first_no + 1;
        txtQuantity.setText("" + quantity);
    }//GEN-LAST:event_txtLastNoFocusLost

    private void btnNewActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        txtIssuedTo.setText ("");
        txtIssueNo.setText ("");
        txtIssueDate.setText ("");
        txtImprest.setText ("");
        txtFirstNo.setText ("");
        txtLastNo.setText ("");
        txtQuantity.setText ("");
        txtImprest.requestFocusInWindow ();
        getNextIssueNo();
        txtIssueNo.setText ("" + issue_no);
        java.util.Date today_dt = new java.util.Date();
        java.sql.Date issue_dt = new java.sql.Date(today_dt.getTime ());
        txtIssueDate.setText(String.valueOf(issue_dt));
        txtIssuedTo.setText(Login.userName);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnClearActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtIssuedTo.setText ("");
        txtIssueNo.setText ("");
        txtIssueDate.setText ("");
        txtImprest.setText ("");
        txtFirstNo.setText ("");
        txtLastNo.setText ("");
        txtQuantity.setText ("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose ();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnNextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        boolean nextRow = false;
        try {
            nextRow = rs.next ();
            if(nextRow) {
                txtIssuedTo.setText (rs.getString (1));
                txtIssueNo.setText (String.valueOf (rs.getInt (2)));
                txtIssueDate.setText (String.valueOf (rs.getDate (3)));
                txtImprest.setText (String.valueOf (rs.getFloat (4)));
                txtFirstNo.setText (String.valueOf (rs.getInt(5)));
                txtLastNo.setText (String.valueOf (rs.getInt(6)));
                txtQuantity.setText (String.valueOf (rs.getInt(7)));
            }
        } catch(Exception e) {
            Message msg = new Message(new javax.swing.JFrame (),true);
            msg.setMessage ("There are no more rows in forward direction");
            msg.isCancelRequired (false);
            msg.show();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        boolean previousRow = false;
        try {
            previousRow = rs.previous ();
            if(previousRow) {
                txtIssuedTo.setText (rs.getString (1));
                txtIssueNo.setText (String.valueOf (rs.getInt (2)));
                txtIssueDate.setText (String.valueOf (rs.getDate (3)));
                txtImprest.setText (String.valueOf (rs.getFloat (4)));
                txtFirstNo.setText (String.valueOf (rs.getInt(5)));
                txtLastNo.setText (String.valueOf (rs.getInt(6)));
                txtQuantity.setText (String.valueOf (rs.getInt(7)));
            }
        } catch(Exception e) {
            Message msg = new Message(new javax.swing.JFrame (),true);
            msg.setMessage ("There are no more rows in reverse direction");
            msg.isCancelRequired (false);
            msg.show();
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void formInternalFrameClosing (javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        try {
            rs.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameOpened (javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        txtIssuedTo.setText (Login.userName);
        connect ();
        java.util.Date today_dt = new java.util.Date();
        java.sql.Date issue_dt = new java.sql.Date(today_dt.getTime ());
        txtIssueDate.setText(String.valueOf(issue_dt));
        txtIssuedTo.setText(Login.userName);
    
        checkMode (TimeTable.getMode ());
//        this.requestFocus();
        txtImprest.requestFocusInWindow ();
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnIssueActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIssueActionPerformed
        try {
            if(TimeTable.getMode().equals ("Add") ) {
                if(checkReceipt()) {
                    String sql1 =  "SELECT cctk_timetable_issue.* FROM cctk_timetable_issue " + 
                                   "WHERE cctk_timetable_issue.first_no = ? " +
                                   "AND cctk_timetable_issue.stn_no = 'RN' " +
                                   "AND cctk_timetable_issue.user_id = ? "; 
                    System.out.println(sql1);
                    pst = con.prepareStatement(sql1);
                    pst.setInt(1, first_no);
                    pst.setString(2, Login.userName);
                    rs = pst.executeQuery();
                    if(rs.next()) {
                        System.out.println(" combination entered");
                        Message msg = new Message(new javax.swing.JFrame (), true);
                        msg.setMessage("This combination has already been entered.");
                        msg.isCancelRequired(false);
                        msg.show();
                        txtFirstNo.setText("");
                        txtFirstNo.requestFocus();
                    } else {
                        java.util.Date today_dt = new java.util.Date();
                        java.sql.Date issue_dt = new java.sql.Date(today_dt.getTime ());
                        pst = con.prepareStatement ("insert into cctk_timetable_issue values (?,?,?,?,?,?,?,?,?,?) ",
                                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        pst.setString(1,"RN");
                        pst.setString(2, Login.userName);
                        
                        pst.setInt(3, Integer.parseInt(txtIssueNo.getText()));
                        pst.setDate(4, issue_dt);
                        txtIssueDate.setText (String.valueOf (issue_dt));
                        pst.setInt(5, first_no);
                        pst.setInt(6, last_no);
                        pst.setInt(7, quantity);
                        pst.setInt(8, first_no);
                        pst.setDouble(9, Double.parseDouble(txtImprest.getText()));
                        pst.setString(10, "I" );
                        int no_rows = pst.executeUpdate();
                        if (no_rows == 1) {
                            Message msg = new Message(new javax.swing.JFrame(), true);
                            msg.setMessage("1 Record Added Sucessfully.");
                            msg.isCancelRequired(false);
                            msg.show();
                        }
                        
                        pst= null;
                        pst= con.prepareStatement("DELETE FROM cctk_timetable_stock WHERE first_no = ? AND last_no = ? AND stn_no = 'RN'", ResultSet.TYPE_SCROLL_SENSITIVE, 
                ResultSet.CONCUR_UPDATABLE);
                        pst.setInt(1, first_no);
                        pst.setInt(2, last_no);
                        no_rows = pst.executeUpdate();
                        if (no_rows == 1) {
                            Message msg = new Message(new javax.swing.JFrame(), true);
                            msg.setMessage("1 Record Deleted Sucessfully.");
                            msg.isCancelRequired(false);
                            msg.show();
                        }
                    } 
                }
            } else {
                sql = null;
                sql = "SELECT cctk_timetable_issue.user_id, cctk_timetable_issue.issue_no, " + 
                            "cctk_timetable_issue.issue_date, cctk_timetable_issue.imprest_cash, " + 
                            "cctk_timetable_issue.first_no, cctk_timetable_issue.last_no, " + 
                            "cctk_timetable_issue.qty_issued " +
                        "FROM otm_station, cctk_timetable_issue " +
                        "WHERE otm_station.stn_no = cctk_timetable_issue.stn_no " 
                ;
                
                if(txtIssuedTo.getText () != null && txtIssuedTo.getText().length () > 0) {
                    sql = sql.concat ("AND cctk_timetable_issue.user_id = ? " );
                }
                if(txtIssueNo.getText () != null && txtIssueNo.getText().length () > 0 ) {
                    sql = sql.concat ("AND cctk_timetable_issue.issue_no = ? " );
                }
                if(txtFirstNo.getText () != null && txtFirstNo.getText().length () > 0 ){
                    sql = sql.concat ("AND cctk_timetable_issue.first_no = ? " );
                }
                
                pst = con.prepareStatement (sql,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int index = 1;
                if(txtIssuedTo.getText () != null && txtIssuedTo.getText().length () > 0) {
                    pst.setString (index, txtIssuedTo.getText());
                    index++;
                }
                if(txtIssueNo.getText () != null && txtIssueNo.getText().length () > 0 ) {
                    pst.setInt (index, Integer.parseInt(txtIssueNo.getText())); 
                    index++;
                }
                if(txtFirstNo.getText () != null && txtFirstNo.getText().length () > 0 ) {
                    pst.setInt (index, Integer.parseInt(txtFirstNo.getText()));
                    index++;
                }
                if(pst.execute()) {
                    rs = pst.getResultSet ();
                }
                rs.next ();
                txtIssuedTo.setText (rs.getString (1));
                txtIssueNo.setText (String.valueOf (rs.getInt (2)));
                txtIssueDate.setText (String.valueOf (rs.getDate (3)));
                txtImprest.setText (String.valueOf (rs.getFloat (4)));
                txtFirstNo.setText (String.valueOf (rs.getInt(5)));
                txtLastNo.setText (String.valueOf (rs.getInt(6)));
                txtQuantity.setText (String.valueOf (rs.getInt(7)));
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnIssueActionPerformed
    
    public void connect () {
        int i = 0;
        try {
            st = con.createStatement();
            rs = st.executeQuery("select charge from ccmk_timetable ");
            rs.next();
            charge = rs.getDouble (1);
            rs = st.executeQuery ("select max(issue_no) from cctk_timetable_issue");
            rs.next ();
            issue_no = rs.getInt (1);
            txtIssueNo.setText(String.valueOf(issue_no + 1));
        } catch (Exception se) {
            se.printStackTrace ();
        }
    }
    
    public void getNextIssueNo() {
        try {
            st = con.createStatement();
            rs = st.executeQuery ("select max(issue_no) from cctk_timetable_issue");
            rs.next ();
            issue_no = rs.getInt (1);
            if(issue_no == 0) {
                issue_no = 1;
            } else {
                issue_no = issue_no + 1;
            }
        } catch (Exception se) {
            se.printStackTrace ();
        }
    }
    public boolean checkReceipt() {
        boolean exists = false;
        try {
            pst = con.prepareStatement("SELECT cctk_timetable_receipt.first_no, cctk_timetable_receipt.last_no FROM cctk_timetable_receipt WHERE cctk_timetable_receipt.first_no <= ? and cctk_timetable_receipt.last_no >= ? ");
            System.out.println(first_no);
            System.out.println(last_no);
            pst.setInt(1, first_no);
            pst.setInt(2, last_no);
            rs = pst.executeQuery();
            
            if(rs.next()) {
                exists = true;
                System.out.println("available in receipt");
            } else {
                System.out.println("not available in receipt");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        return exists;
    }
    public void checkMode (java.lang.String mode) {
         if(TimeTable.getMode().equals ("Add")) {
            setAddMode ();
        } else {
            setQueryMode ();
        }
    }
    
    public void setQueryMode () {
        txtIssuedTo.setEditable (true);
        txtIssueNo.setEditable (true);
        txtImprest.setEditable (true);
        btnPrevious.setVisible (true);
        btnNext.setVisible (true);
        btnClear.setVisible (true);
        btnNew.setVisible (false);
        btnIssue.setText ("Query");
    }
    
    public void setAddMode () {
        txtIssuedTo.setEditable (false);
        txtIssueNo.setEditable (false);
        btnPrevious.setVisible (false);
        btnNext.setVisible (false);
        btnClear.setVisible (false);
        btnNew.setVisible (true);
        btnIssue.setText ("Issue");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnIssue;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JLabel lblFirstNo;
    private javax.swing.JLabel lblImprest;
    private javax.swing.JLabel lblIssueDate;
    private javax.swing.JLabel lblIssueNo;
    private javax.swing.JLabel lblIssuedTo;
    private javax.swing.JLabel lblLastNo;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTextField txtFirstNo;
    private javax.swing.JTextField txtImprest;
    private javax.swing.JTextField txtIssueDate;
    private javax.swing.JTextField txtIssueNo;
    private javax.swing.JTextField txtIssuedTo;
    private javax.swing.JTextField txtLastNo;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
    private java.sql.Connection con = null;
    private java.sql.Statement st = null;
    private java.sql.PreparedStatement pst = null;
    private java.sql.ResultSet rs = null;
    private int issue_no = 0;
    private String[] tbl_types = new String [10];
    private String sql;
    private double charge = 0.0;
    private int first_no = 0;
    private int last_no = 0;
    private int quantity = 0;
}
